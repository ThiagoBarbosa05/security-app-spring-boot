spring.application.name=security
spring.datasource.url=${DATABASE_URL}
spring.datasource.username=docker
spring.datasource.password=docker
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}

aws.access.key.id=${AWS_ACCESS_KEY}
aws.access.secret.key=${AWS_ACCESS_SECRET_KEY}
aws.s3.bucket.name=${AWS_S3_BUCKET_NAME}
aws.region=${AWS_REGION}

spring.servlet.multipart.max-file-size=5MB
spring.servlet.multipart.max-request-size=5MB

logging.level.org.springframework.security=DEBUG

spring.mail.host=smtp.gmail.com
spring.mail.username=${SMTP_MAIL_USERNAME}
spring.mail.port=587
spring.mail.password=${SMTP_MAIL_PASSWORD}
spring.mail.properties.mail.transport.protocol=smtp
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.from=${SMTP_MAIL_USERNAME}
spring.mail.default-encoding=UTF-8
spring.mail.test-connection=false
mail.from.name=Security APP

base.url=${BASE_URL}

# use environment variables or secrets to store the token's secret
security.token.secret="ADFAWFAJBFAKWFKAJFGBASIEKAUGBASEIKULGVBAIGA"
